import redis


from APP.settings import SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MAX_OVERFLOW, SQLALCHEMY_POOL_RECYCLE, \
    SQLALCHEMY_POOL_SIZE, SQLALCHEMY_POOL_TIMEOUT, SQLALCHEMY_TRACK_MODIFICATIONS, SQLALCHEMY_COMMIT_ON_TEARDOWN, \
    SQLALCHEMY_DATABASE_URI_P, env
from utils.RedisUtil import RedisCon


class BaseConfig(object):
    SQLALCHEMY_DATABASE_URI = SQLALCHEMY_DATABASE_URI
    SQLALCHEMY_TRACK_MODIFICATIONS = SQLALCHEMY_TRACK_MODIFICATIONS
    SQLALCHEMY_POOL_SIZE = SQLALCHEMY_POOL_SIZE
    SQLALCHEMY_POOL_TIMEOUT = SQLALCHEMY_POOL_TIMEOUT
    SQLALCHEMY_POOL_RECYCLE = SQLALCHEMY_POOL_RECYCLE
    SQLALCHEMY_MAX_OVERFLOW = SQLALCHEMY_MAX_OVERFLOW
    SQLALCHEMY_COMMIT_ON_TEARDOWN = SQLALCHEMY_COMMIT_ON_TEARDOWN

    # session会话配置
    SESSION_TYPE = 'redis'
    # SESSION_KEY = 'wdtoken'
    SESSION_KEY_PREFIX = 'WD_S:'
    SESSION_REDIS = redis.Redis(connection_pool=RedisCon.getpool())
    SESSION_USE_SIGNER = True
    SESSION_PERMANENT = False
    PERMANENT_SESSION_LIFETIME = 3600

    SECRET_KEY = 'wdtoken'
    LOG_NAME = "log/log.txt"
    LOG_LEVEL = 'DEBUG'


class ProductionBaseConfig(BaseConfig):
    SQLALCHEMY_DATABASE_URI = SQLALCHEMY_DATABASE_URI_P


class Config(object):

    @staticmethod
    def get_config():
        if env == 'dev':
            return BaseConfig
        else:
            return ProductionBaseConfig

